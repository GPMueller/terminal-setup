# Zsh config for modern terminal
# Enable completion, history, and starship prompt
autoload -Uz compinit && compinit
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt inc_append_history
setopt share_history
setopt hist_ignore_dups
setopt hist_reduce_blanks
setopt auto_cd
setopt correct

# Show icons by default in ls
alias ls='eza --icons --long --no-permissions --no-user --header --git --time-style=long-iso --sort=type --sort=name --group-directories-first'

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set theme
ZSH_THEME=""

# Plugins
plugins=(
    git
    z
    zsh-autosuggestions
    zsh-syntax-highlighting
    history-substring-search
)

# Load Oh My Zsh
source $ZSH/oh-my-zsh.sh

# User configuration
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Preferred editor for local and remote sessions
export EDITOR='nvim'

# Aliases
alias zshconfig="nvim ~/.zshrc"
alias ohmyzsh="nvim ~/.oh-my-zsh"
alias lt="eza --tree --level=2 --icons"

# Starship prompt
if command -v starship >/dev/null; then
  eval "$(starship init zsh)"
fi

# fzf keybindings and completion
if [ -f ~/.fzf.zsh ]; then
  source ~/.fzf.zsh
fi

# zoxide init
if command -v zoxide >/dev/null; then
  eval "$(zoxide init zsh)"
fi

tmux_msg() {
  if command -v tmux &>/dev/null && tmux list-sessions &>/dev/null; then
    # Get session data with default values for empty fields
    local sessions
    sessions=$(tmux list-sessions -F "#{session_name}|#{session_windows}|#{session_panes}|#{?session_attached,attached,detached}" |
      awk -F'|' '{OFS=FS; $3=$3==""?"0":$3; print}')

    # Get current session name if we're in a tmux session
    local current_session=""
    if [[ -n "$TMUX" ]]; then
      current_session=$(tmux display-message -p '#S')
    fi

    # Parse and calculate max widths (including header titles)
    local -a names=("Session") windows=("Windows") panes=("Panes") statuses=("Status")
    local max_name=6 max_win=7 max_pane=5 max_status=6  # Minimum header lengths

    while IFS='|' read -r name win pane stat; do
      names+=("$name")
      windows+=("$win")
      panes+=("$pane")
      statuses+=("$stat")
      (( ${#name} > max_name )) && max_name=${#name}
      (( ${#win} > max_win )) && max_win=${#win}
      (( ${#pane} > max_pane )) && max_pane=${#pane}
      (( ${#stat} > max_status )) && max_status=${#stat}
    done <<< "$sessions"

    # Border drawing functions
    horizontal_line() {
      printf "\033[1;35m├\033[0m\033[0m%s┼%s┼%s┼%s┤\n" \
        "$(printf '─%.0s' {1..$((max_name+4))})" \
        "$(printf '─%.0s' {1..$((max_win+2))})" \
        "$(printf '─%.0s' {1..$((max_pane+2))})" \
        "$(printf '─%.0s' {1..$((max_status+2))})"
    }

    # Print table
    printf "\033[1;35m╭─\033[0m \033[1;36mActive tmux Sessions\033[0m\n"
    printf "\033[1;35m│\033[0m   %-*s │ %-*s │ %-*s │ %-*s │\033[0m\n" \
      $max_name "Session" $max_win "Windows" $max_pane "Panes" $max_status "Status"

    horizontal_line

    for ((i=2; i<${#names[@]}+1; i++)); do
      local name=${names[i]}
      local win=${windows[i]}
      local pane=${panes[i]}
      local stat=${statuses[i]}

      # Highlight current session with a different color
      local color="\033[0m  " # Regular white for detached session
      if [[ "$name" == "$current_session" ]]; then
        color="\033[1;32m❯ "  # Bright green for current session
        stat="current"
      elif [[ "$stat" == "attached" ]]; then
        color="\033[1;33m  "  # Yellow for other attached sessions
      fi

      printf "\033[1;35m│\033[0m ${color}%-*s\033[0m │ %-*s │ %-*s │ %-*s │\n" \
        $max_name "$name" \
        $max_win "$win" \
        $max_pane "$pane" \
        $max_status "$stat"
    done

    printf "\033[1;35m╰─\033[0m \033[2;37mUse 'tmux attach -t <name>' to connect\033[0m\n\n"
  else
    printf "   \033[0m\033[1;36mNo active tmux sessions\033[0m\n\n"
  fi
}

welcome_msg() {
  # Only show in interactive shells
  [[ $- == *i* ]] || return

  # Generate dynamic ASCII art with random font/color
  local art_font=$(find ~/.local/share/figlet-fonts/ -name "*.flf" | shuf -n 1)
  echo -e "\n$(figlet -f "$art_font" "Welcome" | lolcat)"

  # System info panel
  local sys_info="$(uname -srmo)"
  local uptime="$(uptime -p | sed 's/up //')"
  local mem_usage="$(free -m | awk '/Mem:/ {printf "%.1f% (%.1f / %.1f GB)", $3/$2*100, $3/1024, $2/1024}')"
  local disk_info=$(df -h / | awk 'NR==2 {printf "%s (%s / %s)", $5, $3, $4}')

  # Format system info with ANSI colors
  printf "\033[1;34m╭─\033[0m \033[1;36mSystem Overview\033[0m\n"
  printf "\033[1;34m├─\033[0m \033[1;37mOS:\033[0m     \033[1;32m%s\033[0m\n" "$sys_info"
  printf "\033[1;34m├─\033[0m \033[1;37mUptime:\033[0m \033[1;32m%s\033[0m\n" "$uptime"
  printf "\033[1;34m├─\033[0m \033[1;37mMemory:\033[0m \033[1;32m%s\033[0m\n" "$mem_usage"
  printf "\033[1;34m╰─\033[0m \033[1;37mDisk:\033[0m   \033[1;32m%s\033[0m\n\n" "$disk_info"

  # Enhanced tmux session display
  tmux_msg

  # Quick tips
  printf ""
  printf "\033[1;35m╭─\033[0m \033[1;36mQuick Tips\033[0m\n"
  printf "\033[1;35m│\033[0m \033[1;37m  • Use 'z' for quick directory navigation\033[0m\n"
  printf "\033[1;35m│\033[0m \033[1;37m  • Press Ctrl+F for fuzzy file search\033[0m\n"
  printf "\033[1;35m│\033[0m \033[1;37m  • Use 'tmux new -s name' to create a new session\033[0m\n"
  printf "\033[1;35m│\033[0m \033[1;37m  • Press Ctrl+B for tmux commands\033[0m\n"
  printf "\033[1;35m╰─\033[0m \033[2;37mUse 'helpme' for a list of available commands\033[0m\n\n"
}

# Helpme command
helpme() {
  # Build the help message
  local help_msg="
Available Commands

Tmux Commands
  • tmux new -s <name>    Create new session
  • tmux attach -t <name> Attach to session
  • tmux ls              List sessions
  • tmux kill-session -t <name> Kill session

Tmux Keybindings (Prefix: Ctrl+b)
  • c            Create new window
  • n            Next window
  • p            Previous window
  • d            Detach from session
  • X            Kill window
  • |            Split pane vertically
  • -            Split pane horizontally
  • hjkl         Navigate between panes
    arrow keys
  • x            Kill pane

Copy Mode (after pressing Ctrl+b [)
  • Space         Start text selection
  • Enter         Copy selected text
  • q             Quit copy mode
  • /             Search forward
  • ?             Search backward
  • n             Next search match
  • N             Previous search match
  • arrow keys    Move cursor
  • PageUp/Down   Scroll up/down

Navigation
  • z        Quick directory navigation
  • Ctrl+F   Fuzzy file search
  • Ctrl+R   Search command history

Editor
  • nvim        Open Neovim
  • zshconfig   Edit zsh config
  • ohmyzsh     Edit oh-my-zsh config

System
  • ls   List files with icons
  • lt   Tree view of directory

Use 'helpme' to show this help message
"

  # Print the help message
  echo "$help_msg"
}

# Call on shell startup
[[ -o interactive ]] && welcome_msg
